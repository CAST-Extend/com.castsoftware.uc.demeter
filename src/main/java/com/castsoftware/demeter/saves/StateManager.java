/*
 * Copyright (C) 2020  Hugo JOBY
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License v3 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public v3
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

package com.castsoftware.demeter.saves;

import com.castsoftware.demeter.config.Configuration;
import com.castsoftware.demeter.database.Neo4jAL;
import com.castsoftware.demeter.exceptions.neo4j.Neo4jBadRequestException;
import com.castsoftware.demeter.exceptions.neo4j.Neo4jNoResult;
import com.castsoftware.demeter.models.imaging.Level5Node;
import org.neo4j.graphdb.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.*;
import java.util.zip.GZIPOutputStream;

/**
 * Save the modifications made by the user in Demeter
 */
public class StateManager {

    // State manager
    private static final String DEFAULT_ENCODING = "UTF-8";
    private static final String PARAGRAPH_DELIMITER = "\n";
    private static final String COLUMN_DELIMITER = ";";
    private static final String OBJ_NAME_DELIMITER = "//";
    private static final String LEVEL_IDENTIFIER = "LEVEL5";
    private static final String MODULE_IDENTIFIER = "MODULE";

    // Static Imaging properties
    private static final String AGGREGATES_REL = Configuration.get("imaging.node.level_nodes.links");
    private static final String IMAGING_OBJECT_LABEL = Configuration.get("imaging.node.object.label");
    private static final String IMAGING_OBJECT_FULL_NAME = Configuration.get("imaging.node.object.fullName");
    private static final String GENERATED_LEVEL_PREFIX = Configuration.get("demeter.prefix.generated_level_prefix");

    private static void saveDemeterLevel5Map(GZIPOutputStream gout, Neo4jAL neo4jAL, String applicationContext) throws Neo4jBadRequestException, Neo4jNoResult, IOException {
        Label objectLabel = Label.label(IMAGING_OBJECT_LABEL);
        RelationshipType aggregates = RelationshipType.withName(AGGREGATES_REL);

        // Get all the demeter
        Map<String, String[]> mapLevelFullName = new HashMap<>();

        // Delete Demeter level5 group based on their full name
        for(Level5Node level : Level5Node.getAllNodesByApplication(neo4jAL, applicationContext)) {
            String fullName = level.getFullName();

            // If the full name match, the level was generated by Demeter
            if(fullName.matches("(.*)##" + GENERATED_LEVEL_PREFIX + "(.*)")) {
                // Keep level to reassign nodes later
                // Add Name
                Node n = level.getNode();
                String starter = LEVEL_IDENTIFIER + COLUMN_DELIMITER + level.getName() + COLUMN_DELIMITER;
                gout.write(starter.getBytes(DEFAULT_ENCODING));

                // Get connected nodes
                String fullNameEntry;
                for(Iterator<Relationship> relIt = n.getRelationships(Direction.OUTGOING, aggregates).iterator(); relIt.hasNext();) {
                    Node obj = relIt.next().getEndNode();
                    if(obj.hasLabel(objectLabel)) {
                        fullNameEntry = (String) obj.getProperty(IMAGING_OBJECT_FULL_NAME) + COLUMN_DELIMITER;
                        gout.write(fullNameEntry.getBytes(DEFAULT_ENCODING));
                    }
                }

                gout.flush();
            }
        }
    }

    /**
     * Save the current modifications made on the application
     * @param saveFile File used to save the data
     * @param applicationName Name of the application
     */
    public static void saveState(Neo4jAL neo4jAL, File saveFile, String applicationName) throws IOException, Neo4jBadRequestException, Neo4jNoResult {
        try (FileOutputStream fo = new FileOutputStream(saveFile)) {

            try(GZIPOutputStream gzip = new GZIPOutputStream(fo)) {
                // Get the levels to save
                saveDemeterLevel5Map(gzip, neo4jAL, applicationName);
            }

            // Compress

            // Get the modules to save

            // Save to File
            fo.flush();
        }
    }
}
